Index: a/src/paperless/adapter.py
===================================================================
--- a/src/paperless/adapter.py
+++ b/src/paperless/adapter.py
@@ -134,6 +134,7 @@
                 f"Adding default social groups to user `{user}`: {group_names}",
             )
             user.groups.add(*groups)
             user.save()
-        handle_social_account_updated(None, request, sociallogin)
+        # Pass created=True since save_user is only called for new users
+        handle_social_account_updated(None, request, sociallogin, created=True)
         return user

Index: a/src/paperless/signals.py
===================================================================
--- a/src/paperless/signals.py
+++ b/src/paperless/signals.py
@@ -35,14 +35,41 @@
 def handle_social_account_updated(sender, request, sociallogin, **kwargs):
     """
     Handle the social account update signal.
     """
-    from django.contrib.auth.models import Group
+    import os
+    from django.contrib.auth.models import Group, Permission
 
     social_account_groups = sociallogin.account.extra_data.get(
         "groups",
         [],
     )  # None if not found
+    
+    # Check for admin groups and grant superuser access
+    if social_account_groups is not None:
+        admin_groups_env = os.environ.get('PAPERLESS_SOCIALACCOUNT_ADMIN_GROUPS', '')
+        admin_groups = [group.strip() for group in admin_groups_env.split(',') if group.strip()]
+        if any(group in social_account_groups for group in admin_groups):
+            logger.debug(
+                f"Granting superuser access to user `{sociallogin.user}` based on admin group membership",
+            )
+            sociallogin.user.is_superuser = True
+            sociallogin.user.is_staff = True
+            sociallogin.user.save()
+    
+    # Handle default permissions for newly created users
+    if kwargs.get('created', False) or not sociallogin.user.user_permissions.exists():
+        default_permissions = os.environ.get('PAPERLESS_SOCIALACCOUNT_DEFAULT_PERMISSIONS', '')
+        if default_permissions:
+            permission_codenames = [perm.strip() for perm in default_permissions.split(',') if perm.strip()]
+            if permission_codenames:
+                permissions = Permission.objects.filter(codename__in=permission_codenames)
+                logger.debug(
+                    f"Adding default permissions to user `{sociallogin.user}`: {permission_codenames}",
+                )
+                sociallogin.user.user_permissions.add(*permissions)
+    
+    # Existing group sync logic
     if settings.SOCIAL_ACCOUNT_SYNC_GROUPS and social_account_groups is not None:
         groups = Group.objects.filter(name__in=social_account_groups)
         logger.debug(
             f"Syncing groups for user `{sociallogin.user}`: {social_account_groups}",
